##
## EPITECH PROJECT, 2019
## [PROJECT NAME]
## File description:
## [PROJECT DESCRIPTION]
##

#
# Config
##########################################
NAME     :=
BIN      :=
DEBUGBIN :=  debug_$(BIN)
TESTBIN  :=  utests_$(BIN)
SHELL    :=  /bin/bash
MAKE     :=  make --no-print-directory -C
RM       :=  rm -rf
CP       :=  cp -t
MV       :=  mv -t
GCOV     :=  gcovr
CC       :=  gcc
.DEFAULT_GOAL := all
COMPILEDBTARGET := all tests
##########################################


#
# Colours
##########################################
CRESET      :=	$$'\033[0m'

# \033[38;2;<R>;<G>;<B>m
CRED        :=	$$'\033[38;2;255;0;0m'
CGREEN      :=	$$'\033[1;32;40m'
CLIGHTGREEN :=  $$'\033[38;2;190;255;200m'
CBLUE       :=	$$'\033[38;2;0;0;255m'
CLIGHTBLUE  :=	$$'\033[38;2;88;255;250m'
CORANGE     :=	$$'\033[38;2;255;167;4m'

# Format
CBOLD       :=  $$'\033[1m'
CUNDERLN    :=  $$'\033[4m'
##########################################


# ----------------------- PYTHON PROGRESS BAR SCRIPT ------------------------ #

define PROGBAR
import argparse
import math
import sys

def main():
  parser = argparse.ArgumentParser(description=__doc__)
  parser.add_argument("--stepno", type=int, required=True)
  parser.add_argument("--nsteps", type=int, required=True)
  parser.add_argument("remainder", nargs=argparse.REMAINDER)
  args = parser.parse_args()

  nchars = int(math.log(args.nsteps, 10)) + 1
  fmt_str = "\033[38;2;255;167;4m[$(NAME) | {:Xd}/{:Xd} | {:6.2f}%]\033[0m".replace("X", str(nchars))
  progress = 100 * args.stepno / args.nsteps
  sys.stdout.write(fmt_str.format(args.stepno, args.nsteps, progress))
  for item in args.remainder:
    sys.stdout.write(" ")
    sys.stdout.write(item)
  sys.stdout.write("\n")

if __name__ == "__main__":
  main()
endef

ifndef ECHO$(NAME)
  $(call export PROGBAR) $(file >progressbar.py,$(PROGBAR))
  T := $(shell $(MAKE) . $(MAKECMDGOALS)	\
       -nrRf $(firstword $(MAKEFILE_LIST)) 	\
       ECHO$(NAME)="COUNT$(NAME)" | grep -c "COUNT$(NAME)")
  N := x
  C = $(words $N)$(eval N := x $N)
  ECHO$(NAME) = python ./progressbar.py --stepno=$C --nsteps=$T
endif

# ----------------------- MAKEFILE STARTS FROM HERE -------------------------- #


#
# Source
##########################################
MAIN := ./src/main.c
SRC  :=
SRC  +=
##########################################


#
# Test sources
##########################################
TEST :=
TEST +=
##########################################


#
# Wrapper sources
##########################################
WRAPSRC := ./lib/libfox/extra/tests/wrappers/test_wrapped_malloc.c
WRAPPED := malloc
##########################################


#
# Files created by unit tests function
##########################################
TESTTMP :=
##########################################


#
# Build config
##########################################
INCDIRS   := ./include
# ----------------------------------------
CFLAGS    = -Wall -Wextra
CFLAGS    += -Werror
CFLAGS    += -fno-builtin
CFLAGS    += $(foreach dir, $(INCDIRS), -iquote $(dir))
# ----------------------------------------
OBJ       :=  $(SRC:.c=.o)
DEP       :=  $(OBJ:.o=.d) $(MAIN:.c=.d)
COV       :=  $(notdir $(DEP:.d=.gc*)) $(notdir $(TEST:.c=.gc*)) $(notdir $(WRAPSRC:.c=.gc*))
.PRECIOUS :=  $(DEP)
-include $(DEP)
##########################################


#
# Libfox automation
##########################################
INCDIRS    += ./lib/libfox/extra/include
# ----------------------------------------
FOXMODULES += datastruct
FOXMODULES += io
FOXMODULES += std
FOXMODULES += string
# ----------------------------------------
LDFLAGS    += $(foreach mod, $(FOXMODULES), -L./lib/libfox/$(strip $(mod)))
LDLIBS     += $(foreach mod, $(FOXMODULES), -lfox_$(strip $(mod)))
# ----------------------------------------
ifdef FOXMODULES
    FOXRULE = $(FOXMODULES)
else
	FOXRULE = tests
endif
##########################################


#
# Test config
##########################################
UTFLAGS   := --always-succeed --timeout 5
# ----------------------------------------
COVFLAGS  := -s --exclude-unreachable-branches
COVFLAGS  += --exclude='.*test_.*'
COVFLAGS  += --exclude='.*wrap_.*'
COVFLAGS  += --exclude-directories='lib/libfox'
REPORT_TEXT = "TEST REPORT"
ifdef SHOW_BRANCHES
    COVFLAGS += -b
	REPORT_TEXT += "(showing branches)"
endif
##########################################


#
# Reciepes
##########################################
%.o: CFLAGS += -MT $@ -MMD
%.o: %.c
	@$(CC) $(CFLAGS) -c -o $@ $<
	@$(ECHO$(NAME)) $(CLIGHTGREEN)Compile OK âœ“$(CRESET) $@
##########################################


#
# Rules
##########################################
.PHONY: libfox
libfox:
	@$(ECHO$(NAME)) $(CORANGE)"Make libfox rule(s)"$(CRESET) $(CBOLD)$(foreach r,$(FOXRULE),"$r")$(CRESET)
	@echo
	@$(MAKE) ./lib/libfox $(FOXRULE)

.PHONY: compiledb
compiledb:
	@[[ "$(shell which compiledb)" == "" ]] || compiledb -n make -ik $(COMPILEDBTARGET)

.PHONY: build
build: libfox
build: | $(FILES)
	@$(CC) -o $(TARGET) $(CFLAGS) $(FILES) $(LDFLAGS) $(LDLIBS)
	@$(ECHO$(NAME)) $(CBOLD)"Link OK"$(CRESET)
	@$(ECHO$(NAME)) $(CBOLD)$(CLIGHTBLUE)"Done compiling"$(CRESET) $(CLIGHTBLUE)$(TARGET)$(CRESET)

.PHONY: all
all: $(NAME)
$(NAME): TARGET          := $(BIN)
$(NAME): COMPILEDBTARGET := $(NAME)
$(NAME): FOXRULE         := $(FOXMODULES)
$(NAME): OBJ             += $(MAIN:.c=.o)
$(NAME): FILES           := $(OBJ)
$(NAME): compiledb libfox
$(NAME): $(MAIN:.c=.o) $(OBJ) build

.PHONY: debug
debug: $(DEBUGBIN)
$(DEBUGBIN): TARGET  := $(DEBUGBIN)
$(DEBUGBIN): FOXRULE := $(FOXMODULES)
$(DEBUGBIN): CFLAGS  += -ggdb3 -rdynamic
$(DEBUGBIN): SRC     += $(MAIN)
$(DEBUGBIN): compiledb libfox
	$(CC) -o $(DEBUGBIN) $(CFLAGS) $(SRC) $(LDFLAGS) $(LDLIBS)

.PHONY: tests
$(TESTBIN): TARGET          := $(TESTBIN)
$(TESTBIN): COMPILEDBTARGET := $(TESTBIN)
$(TESTBIN): FILES           += $(SRC) $(TEST) $(WRAPSRC)
$(TESTBIN): CFLAGS          += --coverage
$(TESTBIN): CFLAGS          += -Wl$(foreach wrap, $(WRAPPED),,--wrap=$(wrap))
$(TESTBIN): LDFLAGS         += -l criterion
$(TESTBIN): FOXRULE         := $(FOXRULE) tests
$(TESTBIN): compiledb libfox rm_test_files build

.PHONY: rm_test_files
rm_test_files:
	@$(foreach tmp, $(TESTTMP), $(RM) $(tmp))

.PHONY: tests tests_run test_report
tests: test_report
tests_run: test_report
test_report: $(TESTBIN)
	@$(ECHO$(NAME)) $(CUNDERLN)$(CGREEN)$(REPORT_TEXT)$(CRESET)
	@./$(TESTBIN) $(UTFLAGS)
	@$(GCOV) $(COVFLAGS)

.PHONY: clean
clean: FOXRULE := clean
clean: OBJ     += $(MAIN:.c=.o)
clean: libfox rm_test_files
	@$(ECHO$(NAME)) $(CRED)"Delete"$(CRESET) "objects"
	@$(RM) $(OBJ)
	@$(ECHO$(NAME)) $(CRED)"Delete"$(CRESET) "dependancy files"
	@$(RM) $(DEP)
	@$(ECHO$(NAME)) $(CRED)"Delete"$(CRESET) "coverage files"
	@$(RM) $(COV)

.PHONY: fclean
fclean: FOXRULE := fclean
fclean: OBJ     += $(MAIN:.c=.o)
fclean: libfox rm_test_files
	@$(ECHO$(NAME)) $(CRED)"Delete"$(CRESET) "objects"
	@$(RM) $(OBJ)
	@$(ECHO$(NAME)) $(CRED)"Delete"$(CRESET) "dependancy files"
	@$(RM) $(DEP)
	@$(ECHO$(NAME)) $(CRED)"Delete"$(CRESET) "coverage files"
	@$(RM) $(COV)
	@$(ECHO$(NAME)) $(CRED)"Delete"$(CRESET) "$(BIN)"
	@$(RM) $(BIN)
	@$(ECHO$(NAME)) $(CRED)"Delete"$(CRESET) "$(TESTBIN)"
	@$(RM) $(TESTBIN)
	@$(ECHO$(NAME)) $(CRED)"Delete"$(CRESET) "$(DEBUGBIN)"
	@$(RM) $(DEBUGBIN)

.PHONY: re
re:
	@$(MAKE) . fclean
	@$(MAKE) . $(.DEFAULT_GOAL)
